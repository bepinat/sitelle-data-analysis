#!/usr/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>
# File: orbs-sitelle-makejob

## Copyright (c) 2010-2017 Thomas Martin <thomas.martin.1@ulaval.ca>
##
## This file is part of ORBS
##
## ORBS is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORBS is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORBS.  If not, see <http://www.gnu.org/licenses/>.

####################################################
############ ORBS SITELLE MAKEJOB ##################
####################################################

## Create a job file given the lists of object files, flat and dark

import argparse
from argparse import ArgumentParser
import orb.core, orbs.version
from orb.core import Tools
import os
import numpy as np

def main(args):

    def filter_path(path):
        path_ = path.strip().split()
        path_index = np.argmax(['.fits' in ipath_ for ipath_ in path_] > 0)
        return path.strip().split()[0]
    
    def make_files_list(list_file_path):
        files_list = list()
        with open(list_file_path, 'r') as f:
            for line in f:
                files_list.append(line.strip())
            #files_list = to.sort_image_list(files_list, image_mode='sitelle')
        return files_list

    
    to = Tools(instrument='sitelle')

    olist = make_files_list(args.object_path)
    first_file = to.read_fits(
        filter_path(olist[0]), return_hdu_only=True)
    hdr = first_file[0].header

    if not args.nice:
        s = """
WAVENUMBER 1
WAVE_CALIB 1
APOD 1.0
"""
    else:
        s = """
WAVENUMBER 0
WAVE_CALIB 1
APOD 1.0
"""

    if args.calibration_laser_map_path is not None:
        s += 'CALIBMAP {}\n'.format(args.calibration_laser_map_path)

    # correct ORDER for laser cube in case an invalid order is passed
    if args.laser:
        if int(hdr['SITORDER']) <= 0:
             s += 'SITORDER {}\n'.format(to._get_config_parameter("CALIB_ORDER"))
    
    with open(args.job_file_name, 'w') as f:

        f.write('## SITELLE_JOB_FILE\n')

        f.write(s)

        if args.source_list_path is not None:
            if os.path.exists(args.source_list_path):
                f.write('SOURCE_LIST_PATH {}\n'.format(
                    args.source_list_path))
            else:
                raise Exception('Source list file {} does not exist'.format(
                    args.source_list_path))
            
        if args.standard_spectrum_path is not None:
            if os.path.exists(args.standard_spectrum_path):
                f.write('STDPATH {}\n'.format(
                    args.standard_spectrum_path))
            else:
                raise Exception('Standard spectrum file {} does not exist'.format(
                    args.standard_spectrum_path))

        if args.phase_map_path is not None:
            if os.path.exists(args.phase_map_path):
                f.write('PHASEMAP0 {}\n'.format(
                    args.phase_map_path))
            else:
                raise Exception('Phase map 0 file {} does not exist'.format(
                    args.phase_map_path))

        # get root path
        root_path_found = False
        index = 0
        while not root_path_found:
            root_path = os.path.split(olist[0])[1][:index]
            for _oline in olist:
                if root_path not in _oline:
                    root_path_found = True
                    root_path = root_path[:-1]
                index += 1
        
        object_list = list()        
        for oline in olist:
            oline = filter_path(oline)
            fits_file = to.read_fits(oline, return_hdu_only=True)
            if 'SITSTEP' in fits_file[0].header:
                istep = fits_file[0].header['SITSTEP']
            else: # get step from odometer
                try: istep = int(os.path.split(oline)[1][len(root_path):-6])
                except ValueError:
                    raise Exception('badly formatted list of files')
                
                
            try: iodom =  int(os.path.split(oline)[1][len(root_path):-6])
            except ValueError: raise Exception(
                'Badly formatted odometer : {}'.format(oline))
            
            if args.object_name is not None:
                try:
                    fits_obj_name = fits_file[0].header['OBJECT']
                    if fits_obj_name.strip() == args.object_name.strip():
                        object_list.append((oline, istep, iodom))
                except Exception as e:
                    print('Error opening FITS file: {}'.format(e))

            else:
                object_list.append((oline, istep, iodom))

        # remove doubles and keep only the latest file            
        min_step = min([istep for oline, istep, iodom in object_list])
        max_step = max([istep for oline, istep, iodom in object_list])
        step_nb = max_step - min_step + 1

        final_list = list()
        for index in range(step_nb):
            istep = index + min_step
            files = [ifile for ifile in object_list if ifile[1] == istep]
            if len(files) == 0:
                raise Exception('step {} does not exist'.format(istep))
            elif len(files) == 1:
                final_list.append(files[0])
            else:
                files = sorted(files, key=lambda ifile: ifile[2])
                print('step {} has been taken {} times: {} is the latest one'.format(istep, len(files), files[-1][0]))
                final_list.append(files[-1])

        # write object files
        if not args.laser:
            for oline, istep, iodom in final_list:
                f.write('OBS {}\n'.format(oline))
                
        else:
            for oline, istep, iodom in final_list:
                f.write('COMPARISON {}\n'.format(filter_path(oline)))

        if args.flat_list_path is not None:
           with open(args.flat_list_path, 'r') as flist:
               for fline in flist:
                   fline = filter_path(fline)
                   f.write('FLAT {}\n'.format(fline.strip()))

        if args.standard_image_list_path is not None:
           with open(args.standard_image_list_path, 'r') as flist:
               for fline in flist:
                   fline = filter_path(fline)
                   f.write('STDIM {}\n'.format(fline.strip()))
        
                   

if __name__ == "__main__":
    """Main entrance of the script.
    
    Parse arguments and launch the process.
    """
    parser = ArgumentParser(
        version=('ORBS-version: {}, ORB-version: {}'.format(
            orbs.version.__version__, orb.core.__version__)),
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="Create a sitelle job file")

    parser.add_argument('object_path',
                        action='store',
                        help="Path to the list of object files (they don't have to be in the exact order).")

    parser.add_argument('-o', dest='object_name', default=None,
                        help='Object name (only the files in the list with the same object name (header keyword OBJECT) will be kept)')
    
    parser.add_argument('--laser', dest='laser',
                        action='store_true',
                        default=False,
                        help='This option must be set if the object is a laser cube')

    parser.add_argument('--nice', dest='nice',
                        action='store_true',
                        default=False,
                        help='Spectral cube flavor will be the nice one (i.e. in wavelength and calibrated in wavelength). By default the spectral cube flavor is in wavenumber and uncalibrated in wavenumber.')

    parser.add_argument('-c', dest='calibration_laser_map_path',
                        default=None,
                        help='Path to the calibration laser map (needed for an object reduction).')

    parser.add_argument('-f', dest='flat_list_path',
                        default=None,
                        help='Path to the list of flat field images.')

    parser.add_argument('-si', dest='standard_image_list_path',
                        default=None,
                        help='Path to the list of standard images.')

    parser.add_argument('-ss', dest='standard_spectrum_path',
                        default=None,
                        help='Path to the standard spectrum')

    parser.add_argument('-pm0', dest='phase_map_path',
                        default=None,
                        help='Path to the order 0 phase map')
    
    parser.add_argument('--source', dest='source_list_path',
                        default=None,
                        help='Path to the list of sources to extract.')
    
    parser.add_argument('job_file_name',
                        action='store',
                        help="Job file name.")

    args = parser.parse_args()

    main(args)
